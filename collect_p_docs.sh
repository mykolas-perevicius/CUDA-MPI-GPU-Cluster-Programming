#!/usr/bin/env bash
set -euo pipefail # Standard safety settings

# This script collects key project documentation files (AI context, Research, Discussion)
# from the 'final_project' directory into a single combined Markdown file in the root.
# Run this script from the project root directory:
# ~/CS485/CUDA-MPI-GPU-Cluster-Programming$ bash collect_p_docs.sh

ROOT_DIR="$(pwd)"
PROJECT_BASE="final_project"
OUTPUT_FILE="project_docs.md" # Output filename in the root directory

# Define the input files relative to PROJECT_BASE
# Ordered logically: AI context, then Research, then Discussion Log
INPUT_FILES=(
    "AI.md"
    "README.md"
    "DISCUSSION.md"
)

# --- Pre-run Checks ---
echo "Running script from: ${ROOT_DIR}"
if [ ! -d "${PROJECT_BASE}" ]; then
    echo "Error: Project directory '${PROJECT_BASE}' not found in '${ROOT_DIR}'."
    exit 1
fi
echo "Found project directory: ${PROJECT_BASE}"

# --- Clear/Create Output File & Add Title ---
echo "Creating/Clearing output file: ${OUTPUT_FILE}"
# Add a title and note about auto-generation
echo "# Combined Project Documentation (${PROJECT_BASE})" > "${OUTPUT_FILE}"
echo "" >> "${OUTPUT_FILE}"
echo "*This file combines key project context, research, and discussion logs.*" >> "${OUTPUT_FILE}"
echo "*It is automatically generated by the \`collect_p_docs.sh\` script.*" >> "${OUTPUT_FILE}"
echo "" >> "${OUTPUT_FILE}"

# --- Append Files ---
echo "Collecting project documentation files..."

file_errors=0
for filename in "${INPUT_FILES[@]}"; do
    full_path="${ROOT_DIR}/${PROJECT_BASE}/${filename}"
    relative_path="${PROJECT_BASE}/${filename}"

    echo "Processing: ${relative_path}"

    # Add a Markdown header and separator for each included file
    echo "" >> "${OUTPUT_FILE}"
    echo "---" >> "${OUTPUT_FILE}" # Horizontal Rule Separator
    echo "" >> "${OUTPUT_FILE}"
    echo "## Content from: \`${relative_path}\`" >> "${OUTPUT_FILE}"
    echo "" >> "${OUTPUT_FILE}"

    if [[ -f "$full_path" ]]; then
        # Append the file content
        # Use sed to add a "> " prefix for blockquoting ai_context.txt if desired
        if [[ "$filename" == "ai_context.txt" ]]; then
             echo "> NOTE: The following section is from \`ai_context.txt\` and is formatted as a blockquote for distinction." >> "${OUTPUT_FILE}"
             echo "" >> "${OUTPUT_FILE}"
             sed 's/^/> /' "$full_path" >> "${OUTPUT_FILE}" # Add blockquote marker
             echo "" >> "${OUTPUT_FILE}" # Add newline after blockquote
        else
            cat "$full_path" >> "${OUTPUT_FILE}"
        fi
    else
        # Indicate missing file clearly within the output document
        echo "**ERROR: File \`${relative_path}\` not found! Content missing below.**" >> "${OUTPUT_FILE}"
        echo "" >> "${OUTPUT_FILE}"
        # Also print warning to terminal
        echo "Warning: Could not find ${full_path}. Content skipped in combined file." >&2
        file_errors=1 # Track if any errors occurred
    fi
    echo "" >> "${OUTPUT_FILE}" # Ensure space after content or error message
done

# --- Add Final Separator and Footer ---
echo "" >> "${OUTPUT_FILE}"
echo "---" >> "${OUTPUT_FILE}" # Final separator
echo "" >> "${OUTPUT_FILE}"
echo "*End of combined document.*" >> "${OUTPUT_FILE}"

# --- Final Status Message ---
if [[ $file_errors -eq 1 ]]; then
     echo "Warning: One or more documentation files were not found. Output file '${OUTPUT_FILE}' may be incomplete."
fi
echo "Done. Documentation collected into ${OUTPUT_FILE}"

exit 0