/*
 * Basic MPI Template (for HW 1-3)
 * CS485 GPU cluster programming
 * Spring 2025
 */

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h> // For timing, if needed or srand

// --- Constants ---
// #define ROOT 0 // Common practice

// --- Function Prototypes ---
// Add prototypes for your functions here

// --- Main Function ---
int main(int argc, char *argv[]) {
    int rank, size;

    // Initialize the MPI environment
    MPI_Init(&argc, &argv);

    // Get the number of processes
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Get the rank of the process
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Optional: Get the name of the processor
    char processor_name[MPI_MAX_PROCESSOR_NAME];
    int name_len;
    MPI_Get_processor_name(processor_name, &name_len);

    if (rank == 0) {
        printf("MPI World Size: %d\n", size);
    }

    printf("Process %d of %d on %s\n", rank, size, processor_name);

    // --- Argument Parsing ---
    int problem_size = 0; // Example: Default problem size
    if (argc > 1) {
        problem_size = atoi(argv[1]);
        if (rank == 0) {
             printf("Problem size input: %d\n", problem_size);
        }
    } else {
        if (rank == 0) {
            // It's often better to print usage and exit gracefully than abort
            fprintf(stderr, "Usage: mpirun -np <num_procs> %s <problem_size>\n", argv[0]);
        }
         MPI_Finalize(); // Finalize before exiting
         return 1; // Indicate error
        // MPI_Abort(MPI_COMM_WORLD, 1); // Alternative, more forceful exit
    }

    // --- Your Homework Logic Starts Here ---

    // Example: Allocate memory, distribute data, compute, gather results...


    // --- Your Homework Logic Ends Here ---


    // Finalize the MPI environment.
    MPI_Finalize();

    return 0; // Indicate success
}

// --- Helper Function Definitions ---
/* Add your functions like init_data, mat_mult, check_result here */

/* Example:
void init_data(double* data, int size) {
    // Implementation
}
*/

/*
End of file
*/